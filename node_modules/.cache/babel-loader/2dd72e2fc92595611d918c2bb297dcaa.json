{"ast":null,"code":"import { FETCH_EMPLOYEES, FETCH_EMPLOYEES_FAIL, SET_MESSAGE } from \"./types\";\nimport employeeService from \"../services/employee.service\";\nexport const getEmployees = () => dispatch => {\n  return employeeService.getEmployees().then(data => {\n    dispatch({\n      type: FETCH_EMPLOYEES,\n      payload: {\n        employees: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: FETCH_EMPLOYEES_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["C:/Users/Ashish Patil/OneDrive/Desktop/Expense Manager/src/actions/employees.js"],"names":["FETCH_EMPLOYEES","FETCH_EMPLOYEES_FAIL","SET_MESSAGE","employeeService","getEmployees","dispatch","then","data","type","payload","employees","Promise","resolve","error","message","response","toString","reject"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,oBAA1B,EAAgDC,WAAhD,QAAmE,SAAnE;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAD,IAAc;AAC9C,SAAOF,eAAe,CAACC,YAAhB,GAA+BE,IAA/B,CACJC,IAAD,IAAU;AACRF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,eADC;AAEPS,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAEH;AAAb;AAFF,KAAD,CAAR;AAIA,WAAOI,OAAO,CAACC,OAAR,EAAP;AACD,GAPI,EAQJC,KAAD,IAAW;AACT,UAAMC,OAAO,GACVD,KAAK,CAACE,QAAN,IACCF,KAAK,CAACE,QAAN,CAAeR,IADhB,IAECM,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAFtB,IAGAD,KAAK,CAACC,OAHN,IAIAD,KAAK,CAACG,QAAN,EALF;AAOAX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP;AADC,KAAD,CAAR;AAIAI,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN,WADC;AAEPO,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAKA,WAAOH,OAAO,CAACM,MAAR,EAAP;AACD,GA1BI,CAAP;AA4BD,CA7BM","sourcesContent":["import { FETCH_EMPLOYEES, FETCH_EMPLOYEES_FAIL, SET_MESSAGE } from \"./types\";\r\nimport employeeService from \"../services/employee.service\";\r\n\r\nexport const getEmployees = () => (dispatch) => {\r\n  return employeeService.getEmployees().then(\r\n    (data) => {\r\n      dispatch({\r\n        type: FETCH_EMPLOYEES,\r\n        payload: { employees: data },\r\n      });\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: FETCH_EMPLOYEES_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}