{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, CHANGE_PWD_SUCCESS, CHANGE_PWD_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve(data);\n  }, error => {\n    const message = \"Invalid Username or password\";\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const changePwd = (old_password, new_password, confirm_password) => dispatch => {\n  return AuthService.changePwd(old_password, new_password, confirm_password).then(data => {\n    dispatch({\n      type: CHANGE_PWD_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve(data);\n  }, error => {\n    const message = \"Please confirm password and ensure it is not same as old one!\";\n    dispatch({\n      type: CHANGE_PWD_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject(message);\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  localStorage.removeItem(\"user\");\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Ashish Patil/OneDrive/Desktop/Expense Manager/src/actions/auth.js"],"names":["LOGIN_SUCCESS","LOGIN_FAIL","CHANGE_PWD_SUCCESS","CHANGE_PWD_FAIL","LOGOUT","SET_MESSAGE","AuthService","login","username","password","dispatch","then","data","type","payload","user","Promise","resolve","error","message","reject","changePwd","old_password","new_password","confirm_password","logout","localStorage","removeItem"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,kBAApC,EAAwDC,eAAxD,EAAyEC,MAAzE,EAAiFC,WAAjF,QAAoG,SAApG;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAyBC,QAAD,IAAc;AACzD,SAAOJ,WAAW,CAACC,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCE,IAAtC,CACJC,IAAD,IAAU;AACRF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb,aADC;AAEPc,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEH;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOI,OAAO,CAACC,OAAR,CAAgBL,IAAhB,CAAP;AACD,GARI,EASJM,KAAD,IAAW;AACT,UAAMC,OAAO,GAAG,8BAAhB;AAEAT,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAIAS,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WADC;AAEPS,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAKA,WAAOH,OAAO,CAACI,MAAR,EAAP;AACD,GAtBI,CAAP;AAwBD,CAzBM;AA2BP,OAAO,MAAMC,SAAS,GAAG,CAACC,YAAD,EAAeC,YAAf,EAA6BC,gBAA7B,KAAmDd,QAAD,IAAc;AACvF,SAAOJ,WAAW,CAACe,SAAZ,CAAsBC,YAAtB,EAAoCC,YAApC,EAAkDC,gBAAlD,EAAoEb,IAApE,CACJC,IAAD,IAAU;AACRF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEX,kBADC;AAEPY,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEH;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOI,OAAO,CAACC,OAAR,CAAgBL,IAAhB,CAAP;AACD,GARI,EASJM,KAAD,IAAW;AACT,UAAMC,OAAO,GAAG,+DAAhB;AAEAT,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAIAO,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WADC;AAEPS,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAKA,WAAOH,OAAO,CAACI,MAAR,CAAeD,OAAf,CAAP;AACD,GAtBI,CAAP;AAwBD,CAzBM;AA2BP,OAAO,MAAMM,MAAM,GAAG,MAAOf,QAAD,IAAc;AACxCJ,EAAAA,WAAW,CAACmB,MAAZ;AACAC,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AAEAjB,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAET;AADC,GAAD,CAAR;AAGD,CAPM","sourcesContent":["import { LOGIN_SUCCESS, LOGIN_FAIL, CHANGE_PWD_SUCCESS, CHANGE_PWD_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve(data);\r\n    },\r\n    (error) => {\r\n      const message = \"Invalid Username or password\";\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const changePwd = (old_password, new_password, confirm_password) => (dispatch) => {\r\n  return AuthService.changePwd(old_password, new_password, confirm_password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: CHANGE_PWD_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve(data);\r\n    },\r\n    (error) => {\r\n      const message = \"Please confirm password and ensure it is not same as old one!\";\r\n\r\n      dispatch({\r\n        type: CHANGE_PWD_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject(message);\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n  localStorage.removeItem(\"user\");\r\n  \r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}