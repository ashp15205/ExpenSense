{"ast":null,"code":"import { FETCH_CLIENTS, FETCH_CLIENTS_FAIL, SET_MESSAGE, ADD_CLIENT, ADD_CLIENT_FAIL, DELETE_CLIENT, DELETE_CLIENT_FAIL, UPDATE_CLIENT, UPDATE_CLIENT_FAIL } from \"./types\";\nimport clientService from \"../services/client.service\";\nexport const getClients = () => dispatch => {\n  return clientService.getClients().then(data => {\n    dispatch({\n      type: FETCH_CLIENTS,\n      payload: {\n        clients: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: FETCH_CLIENTS_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const addClient = payload => dispatch => {\n  return clientService.addClient(payload).then(data => {\n    dispatch({\n      type: ADD_CLIENT,\n      payload: {\n        clients: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: ADD_CLIENT_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const updateClient = (id, payload) => dispatch => {\n  return clientService.updateClient(id, payload).then(data => {\n    dispatch({\n      type: UPDATE_CLIENT,\n      payload: {\n        clients: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: UPDATE_CLIENT_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const deleteClient = payload => dispatch => {\n  return clientService.deleteClient(payload).then(data => {\n    dispatch({\n      type: DELETE_CLIENT,\n      payload: {\n        id: payload\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: DELETE_CLIENT_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["C:/Users/Ashish Patil/OneDrive/Desktop/Expense Manager/src/actions/client.js"],"names":["FETCH_CLIENTS","FETCH_CLIENTS_FAIL","SET_MESSAGE","ADD_CLIENT","ADD_CLIENT_FAIL","DELETE_CLIENT","DELETE_CLIENT_FAIL","UPDATE_CLIENT","UPDATE_CLIENT_FAIL","clientService","getClients","dispatch","then","data","type","payload","clients","Promise","resolve","error","message","response","toString","reject","addClient","updateClient","id","deleteClient"],"mappings":"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","sourcesContent":["import {\r\n  FETCH_CLIENTS,\r\n  FETCH_CLIENTS_FAIL,\r\n  SET_MESSAGE,\r\n  ADD_CLIENT,\r\n  ADD_CLIENT_FAIL,\r\n  DELETE_CLIENT,\r\n  DELETE_CLIENT_FAIL,\r\n  UPDATE_CLIENT,\r\n  UPDATE_CLIENT_FAIL,\r\n} from \"./types\";\r\nimport clientService from \"../services/client.service\";\r\n\r\nexport const getClients = () => (dispatch) => {\r\n  return clientService.getClients().then(\r\n    (data) => {\r\n      dispatch({\r\n        type: FETCH_CLIENTS,\r\n        payload: { clients: data },\r\n      });\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: FETCH_CLIENTS_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\nexport const addClient = (payload) => (dispatch) => {\r\n  return clientService.addClient(payload).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: ADD_CLIENT,\r\n        payload: { clients: data },\r\n      });\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: ADD_CLIENT_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const updateClient = (id, payload) => (dispatch) => {\r\n  return clientService.updateClient(id, payload).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: UPDATE_CLIENT,\r\n        payload: { clients: data },\r\n      });\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: UPDATE_CLIENT_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const deleteClient = (payload) => (dispatch) => {\r\n  return clientService.deleteClient(payload).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: DELETE_CLIENT,\r\n        payload: { id: payload },\r\n      });\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: DELETE_CLIENT_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}